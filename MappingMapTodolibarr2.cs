////////////////////////////////////////////////////////////////////////
//
// MappingMapTodolibarr2.cs
//
// This file was generated by MapForce 2023r2.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;
using Altova.Db;
using Altova.TextParser;


using Fichier_texte; // application.libraries
using propal; // application.libraries

namespace Mapping
{

	public class MappingMapTodolibarr2 : Altova.TraceProvider
	{
		private bool runDoesCloseAll = true;
		public bool CloseObjectsAfterRun { get { return runDoesCloseAll; } set { runDoesCloseAll = value; }	}


		#region Members		
		// instances
		protected System.Data.IDbConnection	m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance;
		protected Altova.TextParser.TableLike.Table m_productInstance;
		protected Altova.TextParser.TableLike.Table m_propal2Instance;
		// members
		#endregion //Members


		public class Setup
		{
			public class main : IEnumerable
			{
				private readonly Altova.Db.Catalog var1_catalog;

				public main(
					Altova.Db.Catalog var1_catalog
				)
				{
					this.var1_catalog = var1_catalog;
				}

				public static IEnumerable Invoke(object o)
				{
					return new main((Altova.Db.Catalog)o);
				}

				public IEnumerator GetEnumerator() { return new Enumerator(this); }

				class Enumerator : Altova.Mapforce.IMFEnumerator
				{
					private int state = 1;
					private object current = null;
					private int pos = 0;
					private readonly main closure;
					private Altova.Db.Statement var2_NewStatement;
					public Enumerator(main closure) 
					{
						this.closure = closure;
					}

					public void Reset() { state = 0; pos = 0;}
					public int Position { get { return pos; } }
					public object Current { get { return current; } }

					public bool MoveNext()
					{
						while (state != 0)
						{
							switch (state) 
							{
							case 1:
								state = 0;
								Altova.Db.Dbs.PrepareStatement(Altova.Db.Dbs.NewStatement(closure.var1_catalog, 1, "DELETE FROM `llx_propaldet`"));
								var2_NewStatement = (Altova.Db.Dbs.NewStatement(closure.var1_catalog, 2, "INSERT INTO `llx_propaldet` (`fk_propal`, `fk_product`, `description`, `tva_tx`, `qty`, `remise_percent`, `subprice`, `total_ht`, `total_tva`, `total_ttc`, `product_type`, `buy_price_ht`, `special_cod"
 + "e`, `rang`, `multicurrency_subprice`, `multicurrency_total_ht`, `multicurrency_total_tva`, `multicurrency_total_ttc`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Int32,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Int32,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.String,65535,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Int32,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Int32,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Int32,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.AddParameter(var2_NewStatement, new Altova.Db.TParameter(System.Data.DbType.Double,-1,-1,-1,"?"));
								Altova.Db.Dbs.PrepareStatement(var2_NewStatement);
								current = Altova.CoreTypes.ParseBoolean("true");
								pos++;
								return true;
							}
						}
						return false;
					}

					public void Dispose() 
					{
					}
				}
			}

		}

		static void WriteDB(IEnumerable mapping, Altova.Db.Catalog target) 
		{
			IEnumerator en = mapping.GetEnumerator();
			en.MoveNext();
			Altova.Db.Record record = (Altova.Db.Record) en.Current;
			
			Setup.main setup = new Setup.main(target);
			setup.GetEnumerator().MoveNext();
	
			Altova.Db.TransactionHelper mTransactionHelper = new Altova.Db.TransactionHelper(
				target.MainConnection, 
				"START TRANSACTION", 
				"COMMIT", 
				"ROLLBACK", 
				"SAVEPOINT  %%TRANSACTION_NAME%% ", 
				"ROLLBACK TO SAVEPOINT  %%TRANSACTION_NAME%% "
			);
			using (Altova.Db.TransactionSentinel sentinel = new Altova.Db.TransactionSentinel(mTransactionHelper, ""))
			{
				try
				{
					target.CurrentTransaction = mTransactionHelper.Transaction;
					IEnumerable actionBeforeSequence_llx_propaldet = 
						new ActionBefore_llx_propaldet.main(target);
					IEnumerator actionBeforeSequenceEnum_llx_propaldet = 
						actionBeforeSequence_llx_propaldet.GetEnumerator();
					actionBeforeSequenceEnum_llx_propaldet.MoveNext();
					foreach (Altova.Db.Record rec in record.children["llx_propaldet|0"])
						WriteDB_llx_propaldet(record, rec, target, mTransactionHelper);

					sentinel.Commit();
				}
				catch(Exception e)
				{
					sentinel.Rollback();
					// report the error and continue with next component
					Console.Error.Write("ERROR: ");
					Console.Error.WriteLine( e.Message );
					if (e.InnerException != null)
					{
						Console.Error.Write("Inner Exception: ");
						Console.Error.WriteLine(e.InnerException.Message);
					}
					Console.Error.WriteLine("\nStack Trace: ");
					Console.Error.WriteLine( e.StackTrace );
					Console.Error.WriteLine("\nContinue execution.");
				}
			}
		}
		class ActionBefore_llx_propaldet
		{
			public class main : IEnumerable
			{
				private readonly Altova.Db.Catalog var1_catalog;

				public main(
					Altova.Db.Catalog var1_catalog
				)
				{
					this.var1_catalog = var1_catalog;
				}

				public static IEnumerable Invoke(object o)
				{
					return new main((Altova.Db.Catalog)o);
				}

				public IEnumerator GetEnumerator() { return new Enumerator(this); }

				class Enumerator : Altova.Mapforce.IMFEnumerator
				{
					private int state = 1;
					private object current = null;
					private int pos = 0;
					private readonly main closure;
					public Enumerator(main closure) 
					{
						this.closure = closure;
					}

					public void Reset() { state = 0; pos = 0;}
					public int Position { get { return pos; } }
					public object Current { get { return current; } }

					public bool MoveNext()
					{
						while (state != 0)
						{
							switch (state) 
							{
							case 1:
								state = 0;
								Altova.Db.Dbs.ExecuteNonReader(Altova.Db.Dbs.NewQuery(closure.var1_catalog, 1));
								current = Altova.CoreTypes.ParseBoolean("true");
								pos++;
								return true;
							}
						}
						return false;
					}

					public void Dispose() 
					{
					}
				}
			}
		}
		class Action_llx_propaldet 
		{
			public class main : IEnumerable
			{
				private readonly Altova.Db.Catalog var1_catalog;
				private readonly Altova.Db.Record var2_record;

				public main(
					Altova.Db.Catalog var1_catalog,
					Altova.Db.Record var2_record
				)
				{
					this.var1_catalog = var1_catalog;
					this.var2_record = var2_record;
				}

				public static IEnumerable Invoke(object o, params object[] p)
				{
					return new main((Altova.Db.Catalog)p[0], (Altova.Db.Record)o);
				}

				public IEnumerator GetEnumerator() { return new Enumerator(this); }

				class Enumerator : Altova.Mapforce.IMFEnumerator
				{
					private int state = 1;
					private object current = null;
					private int pos = 0;
					private readonly main closure;
					private Altova.Db.Statement var3_NewQuery;
					public Enumerator(main closure) 
					{
						this.closure = closure;
					}

					public void Reset() { state = 0; pos = 0;}
					public int Position { get { return pos; } }
					public object Current { get { return current; } }

					public bool MoveNext()
					{
						while (state != 0)
						{
							switch (state) 
							{
							case 1:
								state = 3;
								var3_NewQuery = (Altova.Db.Dbs.NewQuery(closure.var1_catalog, 2));
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "fk_propal")))) { state = 2; goto case 2;  }
								Altova.Db.Dbs.BindParameter_int(var3_NewQuery, (int)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "fk_propal")));
								goto case 3;
							case 2:
								state = 3;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 3;
							case 3:
								state = 5;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "fk_product")))) { state = 4; goto case 4;  }
								Altova.Db.Dbs.BindParameter_int(var3_NewQuery, (int)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "fk_product")));
								goto case 5;
							case 4:
								state = 5;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 5;
							case 5:
								state = 7;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "description")))) { state = 6; goto case 6;  }
								Altova.Db.Dbs.BindParameter_string(var3_NewQuery, (string)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "description")));
								goto case 7;
							case 6:
								state = 7;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 7;
							case 7:
								state = 9;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "tva_tx")))) { state = 8; goto case 8;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "tva_tx")));
								goto case 9;
							case 8:
								state = 9;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 9;
							case 9:
								state = 11;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "qty")))) { state = 10; goto case 10;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "qty")));
								goto case 11;
							case 10:
								state = 11;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 11;
							case 11:
								state = 13;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "remise_percent")))) { state = 12; goto case 12;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "remise_percent")));
								goto case 13;
							case 12:
								state = 13;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 13;
							case 13:
								state = 15;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "subprice")))) { state = 14; goto case 14;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "subprice")));
								goto case 15;
							case 14:
								state = 15;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 15;
							case 15:
								state = 17;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "total_ht")))) { state = 16; goto case 16;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "total_ht")));
								goto case 17;
							case 16:
								state = 17;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 17;
							case 17:
								state = 19;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "total_tva")))) { state = 18; goto case 18;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "total_tva")));
								goto case 19;
							case 18:
								state = 19;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 19;
							case 19:
								state = 21;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "total_ttc")))) { state = 20; goto case 20;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "total_ttc")));
								goto case 21;
							case 20:
								state = 21;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 21;
							case 21:
								state = 23;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "product_type")))) { state = 22; goto case 22;  }
								Altova.Db.Dbs.BindParameter_int(var3_NewQuery, (int)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "product_type")));
								goto case 23;
							case 22:
								state = 23;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 23;
							case 23:
								state = 25;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "buy_price_ht")))) { state = 24; goto case 24;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "buy_price_ht")));
								goto case 25;
							case 24:
								state = 25;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 25;
							case 25:
								state = 27;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "special_code")))) { state = 26; goto case 26;  }
								Altova.Db.Dbs.BindParameter_int(var3_NewQuery, (int)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "special_code")));
								goto case 27;
							case 26:
								state = 27;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 27;
							case 27:
								state = 29;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "rang")))) { state = 28; goto case 28;  }
								Altova.Db.Dbs.BindParameter_int(var3_NewQuery, (int)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "rang")));
								goto case 29;
							case 28:
								state = 29;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 29;
							case 29:
								state = 31;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "multicurrency_subprice")))) { state = 30; goto case 30;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "multicurrency_subprice")));
								goto case 31;
							case 30:
								state = 31;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 31;
							case 31:
								state = 33;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "multicurrency_total_ht")))) { state = 32; goto case 32;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "multicurrency_total_ht")));
								goto case 33;
							case 32:
								state = 33;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 33;
							case 33:
								state = 35;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "multicurrency_total_tva")))) { state = 34; goto case 34;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "multicurrency_total_tva")));
								goto case 35;
							case 34:
								state = 35;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 35;
							case 35:
								state = 37;
								if (!(Altova.Functions.Core.Exists(Altova.Db.Dbs.ReadField(closure.var2_record, "multicurrency_total_ttc")))) { state = 36; goto case 36;  }
								Altova.Db.Dbs.BindParameter_double(var3_NewQuery, (double)Altova.Functions.Core.First(Altova.Db.Dbs.ReadField(closure.var2_record, "multicurrency_total_ttc")));
								goto case 37;
							case 36:
								state = 37;
								Altova.Db.Dbs.BindParameter_empty(var3_NewQuery);
								goto case 37;
							case 37:
								state = 0;
								current = (Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(Altova.Db.Dbs.ExecuteNonReader(var3_NewQuery)))) != (Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(0)));
								pos++;
								return true;
							}
						}
						return false;
					}

					public void Dispose() 
					{
					}
				}
			}
		}

		static void WriteDB_llx_propaldet(Altova.Db.Record parent, Altova.Db.Record record, Altova.Db.Catalog target, Altova.Db.TransactionHelper mTransactionHelper)
		{
			target.CurrentTransaction = mTransactionHelper.Transaction;
			IEnumerable actionSequence = new Action_llx_propaldet.main(target, record);
			IEnumerator actionSequenceEnum = actionSequence.GetEnumerator();
			actionSequenceEnum.MoveNext();
		}

		public void Run(string SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4SourceConnectionString, String productSourceFilename, String propal2SourceFilename, string dolibarr2TargetConnectionString)
		{
			// open source streams
			using (Altova.IO.Input productSource = new Altova.IO.FileInput(productSourceFilename))
			using (Altova.IO.Input propal2Source = new Altova.IO.FileInput(propal2SourceFilename))
			{
				// run
				Run(SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4SourceConnectionString, productSource, propal2Source, dolibarr2TargetConnectionString);
			}
		}

		public void Run(string SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4SourceConnectionString, Altova.IO.Input productSource, Altova.IO.Input propal2Source, string dolibarr2TargetConnectionString)
		{
			try
			{
				// Open the source(s)
			WriteTrace("Connecting to SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4 database...\n");
			try
			{
				DbProviderFactory factory = DbProviderFactories.GetFactory("System.Data.OleDb");
				m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance = factory.CreateConnection();
				m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance.ConnectionString = SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4SourceConnectionString;
				m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance.Open();
			}
			catch (Exception e)
			{
				throw new DataSourceUnavailableException("Error connecting to database.", e);
			}
			WriteTrace("Parsing Text...\n");
			Altova.TextParser.TableLike.CSVTable productInstanceObject = new Altova.TextParser.TableLike.CSVTable(Fichier_texte.Fichier_texte_TypeInfo.binder.Types[Fichier_texte.Fichier_texte_TypeInfo._altova_ti_altova_LignesType]);
			m_productInstance = productInstanceObject;
			Altova.TextParser.TableLike.Table productSourceObject = m_productInstance;
			productInstanceObject.Format.AssumeFirstRowAsHeaders = false;
			productInstanceObject.Format.FieldDelimiter = ',';
			productInstanceObject.Format.RemoveEmpty = true;
			productInstanceObject.Format.QuoteCharacter = '\"';
			m_productInstance.SetEncoding( "UTF-8", false, false );
			m_productInstance.Parse(productSource);
			if (runDoesCloseAll)
				productSource.Close();
			WriteTrace("Parsing Text...\n");
			Altova.TextParser.TableLike.CSVTable propal2InstanceObject = new Altova.TextParser.TableLike.CSVTable(propal.propal_TypeInfo.binder.Types[propal.propal_TypeInfo._altova_ti_altova_LignesType]);
			m_propal2Instance = propal2InstanceObject;
			Altova.TextParser.TableLike.Table propal2SourceObject = m_propal2Instance;
			propal2InstanceObject.Format.AssumeFirstRowAsHeaders = false;
			propal2InstanceObject.Format.FieldDelimiter = ',';
			propal2InstanceObject.Format.RemoveEmpty = true;
			propal2InstanceObject.Format.QuoteCharacter = '\"';
			m_propal2Instance.SetEncoding( "UTF-8", false, false );
			m_propal2Instance.Parse(propal2Source);
			if (runDoesCloseAll)
				propal2Source.Close();
				// Create the target
				WriteTrace("Connecting to dolibarr2 database...\n");
				System.Data.Common.DbConnection dolibarr2TargetObject;
				try
				{
					DbProviderFactory factory = DbProviderFactories.GetFactory("System.Data.Odbc");
					dolibarr2TargetObject = factory.CreateConnection();
					dolibarr2TargetObject.ConnectionString = dolibarr2TargetConnectionString;
					dolibarr2TargetObject.Open();
				}
				catch (Exception e)
				{
					throw new DataTargetUnavailableException("Error connecting to database.", e);
				}

				// Execute mapping

			main mapping = new main( 
				new Altova.Db.Catalog(m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance, 60), 
				new Altova.Mapforce.TableAsMFNodeAdapter(m_productInstance, productSource.Filename), 
				new Altova.Mapforce.TableAsMFNodeAdapter(m_propal2Instance, propal2Source.Filename));

			WriteDB(mapping, new Altova.Db.Catalog(dolibarr2TargetObject, 60, true));

				// Close the target
			dolibarr2TargetObject.Close();



			}
			finally
			{
				// Close the Source Library
			m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance.Close();
				if (runDoesCloseAll)
				{
					productSource.Close();
					propal2Source.Close();
				}

			}
		}
		class main : IEnumerable
		{
			private readonly Altova.Db.Catalog var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;
			private readonly Altova.Mapforce.IMFNode var2_product_Instance;
			private readonly Altova.Mapforce.IMFNode var3_propal_Instance;

			public main(
				Altova.Db.Catalog var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance,
				Altova.Mapforce.IMFNode var2_product_Instance,
				Altova.Mapforce.IMFNode var3_propal_Instance
			)
			{
				this.var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance = var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;
				this.var2_product_Instance = var2_product_Instance;
				this.var3_propal_Instance = var3_propal_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly main closure;
				private Altova.Db.Statement var4_NewStatement;
				public Enumerator(main closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 0;
							var4_NewStatement = (Altova.Db.Dbs.NewStatement(closure.var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, 1, "SELECT \r  SDL.LineType, \r  SDL.LineOrder, \r  SDL.DescriptionClear, \r  SDL.Quantity, \r  SDL.CostPrice, \r  SDL.TotalDiscountRate, \r  SDL.NetAmountVatExcluded, \r  SDL.NetAmountVatIncluded, \r  SD"
 + "L.VatAmount, \r  SDL.SalePriceVatExcluded,\r  SDL.ItemId,\r  SD.DocumentNumber,\r  V.rate  -- ce champ sera NULL si aucune correspondance dans la table Vat\rFROM \r  SaleDocument AS SD\rJOIN \r  SaleD"
 + "ocumentLine AS SDL ON SD.Id = SDL.DocumentId\rLEFT JOIN  -- notez l\'utilisation de LEFT JOIN ici\r  Vat AS V ON SDL.VatID = V.ID\rWHERE \r  SD.NumberPrefix = \'DE\' \r--AND \r--  SD.NumberSuffix > 12"
 + "000\rORDER BY \r  SD.DocumentNumber DESC;\r"));
							Altova.Db.Dbs.PrepareStatement(var4_NewStatement);
							current = (Altova.Db.Record)Altova.Functions.Core.First((new seq1_NewRecord(closure.var2_product_Instance, closure.var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, closure.var3_propal_Instance)));
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq1_NewRecord : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_product_Instance;
			private readonly Altova.Db.Catalog var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;
			private readonly Altova.Mapforce.IMFNode var3_propal_Instance;

			public seq1_NewRecord(
				Altova.Mapforce.IMFNode var1_product_Instance,
				Altova.Db.Catalog var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance,
				Altova.Mapforce.IMFNode var3_propal_Instance
			)
			{
				this.var1_product_Instance = var1_product_Instance;
				this.var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance = var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;
				this.var3_propal_Instance = var3_propal_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq1_NewRecord closure;
				private Altova.Db.Record var4_NewRecord;
				public Enumerator(seq1_NewRecord closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 0;
							var4_NewRecord = (Altova.Db.Dbs.NewRecord());
							Altova.Db.Dbs.AddChildren(var4_NewRecord, "llx_propaldet|0", (new seq2_map(closure.var1_product_Instance, closure.var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, closure.var3_propal_Instance)));
							current = var4_NewRecord;
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq2_map : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_product_Instance;
			private readonly Altova.Db.Catalog var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;
			private readonly Altova.Mapforce.IMFNode var3_propal_Instance;

			public seq2_map(
				Altova.Mapforce.IMFNode var1_product_Instance,
				Altova.Db.Catalog var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance,
				Altova.Mapforce.IMFNode var3_propal_Instance
			)
			{
				this.var1_product_Instance = var1_product_Instance;
				this.var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance = var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;
				this.var3_propal_Instance = var3_propal_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq2_map closure;
				private IEnumerator var4_ReadRecordSet;
				private Altova.Db.Record var5_NewRecord;
				private System.Collections.IEnumerable var6_read_field;
				private System.Collections.IEnumerable var7_map;
				private System.Collections.IEnumerable var8_map;
				private System.Collections.IEnumerable var9_map;
				private System.Collections.IEnumerable var10_map;
				public Enumerator(seq2_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var4_ReadRecordSet = (Altova.Db.Dbs.ReadRecordSet((Altova.Db.Recordset)Altova.Functions.Core.First((new seq3_NewQuery(closure.var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance))), new Altova.Mapforce.MFInvoke(seq4_NewRecord.Invoke))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var4_ReadRecordSet.MoveNext()) { state = 3; goto case 3; }
							var5_NewRecord = (Altova.Db.Dbs.NewRecord());
							var6_read_field = new Altova.Functions.Core.SequenceCache(Altova.Db.Dbs.ReadField((Altova.Db.Record)(var4_ReadRecordSet.Current), "LineType"));
							var7_map = new Altova.Functions.Core.SequenceCache((new seq5_map((Altova.Db.Record)(var4_ReadRecordSet.Current))));
							var8_map = new Altova.Functions.Core.SequenceCache((new seq6_map((Altova.Db.Record)(var4_ReadRecordSet.Current))));
							var9_map = new Altova.Functions.Core.SequenceCache((new seq7_map((Altova.Db.Record)(var4_ReadRecordSet.Current))));
							var10_map = new Altova.Functions.Core.SequenceCache((new seq8_map((Altova.Db.Record)(var4_ReadRecordSet.Current))));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "fk_propal", (new seq9_map((Altova.Db.Record)(var4_ReadRecordSet.Current), closure.var3_propal_Instance)));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "fk_product", (new seq13_map(closure.var1_product_Instance, (Altova.Db.Record)(var4_ReadRecordSet.Current))));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "description", Altova.Db.Dbs.ReadField((Altova.Db.Record)(var4_ReadRecordSet.Current), "DescriptionClear"));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "tva_tx", (new seq16_map((Altova.Db.Record)(var4_ReadRecordSet.Current))));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "qty", (new seq17_join((Altova.Db.Record)(var4_ReadRecordSet.Current), var6_read_field)));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "remise_percent", (new seq18_map((Altova.Db.Record)(var4_ReadRecordSet.Current))));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "subprice", var8_map);
							Altova.Db.Dbs.WriteField(var5_NewRecord, "total_ht", var7_map);
							Altova.Db.Dbs.WriteField(var5_NewRecord, "total_tva", var10_map);
							Altova.Db.Dbs.WriteField(var5_NewRecord, "total_ttc", var9_map);
							Altova.Db.Dbs.WriteField(var5_NewRecord, "product_type", (new seq19_join(var6_read_field)));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "buy_price_ht", (new seq20_map((Altova.Db.Record)(var4_ReadRecordSet.Current))));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "special_code", (new seq21_join(var6_read_field)));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "rang", Altova.Db.Dbs.ReadField((Altova.Db.Record)(var4_ReadRecordSet.Current), "LineOrder"));
							Altova.Db.Dbs.WriteField(var5_NewRecord, "multicurrency_subprice", var8_map);
							Altova.Db.Dbs.WriteField(var5_NewRecord, "multicurrency_total_ht", var7_map);
							Altova.Db.Dbs.WriteField(var5_NewRecord, "multicurrency_total_tva", var10_map);
							Altova.Db.Dbs.WriteField(var5_NewRecord, "multicurrency_total_ttc", var9_map);
							current = var5_NewRecord;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var4_ReadRecordSet); var4_ReadRecordSet = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var4_ReadRecordSet); var4_ReadRecordSet = null;
				}
			}
		}
		class seq3_NewQuery : IEnumerable
		{
			private readonly Altova.Db.Catalog var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;

			public seq3_NewQuery(
				Altova.Db.Catalog var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance
			)
			{
				this.var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance = var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq3_NewQuery closure;
				private Altova.Db.Statement var2_NewQuery;
				public Enumerator(seq3_NewQuery closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 0;
							var2_NewQuery = (Altova.Db.Dbs.NewQuery(closure.var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, 1));
							current = Altova.Db.Dbs.ExecuteQuery(var2_NewQuery);
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Db.Dbs.DisposeQuery(var2_NewQuery);
				}
			}
		}
		class seq4_NewRecord : IEnumerable
		{
			private readonly Altova.Db.Recordset var1_RecordSet;

			public seq4_NewRecord(
				Altova.Db.Recordset var1_RecordSet
			)
			{
				this.var1_RecordSet = var1_RecordSet;
			}

			public static IEnumerable Invoke(object o)
			{
				return new seq4_NewRecord((Altova.Db.Recordset)o);
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq4_NewRecord closure;
				private Altova.Db.Record var2_NewRecord;
				public Enumerator(seq4_NewRecord closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 0;
							var2_NewRecord = (Altova.Db.Dbs.NewRecord());
							Altova.Db.Dbs.Read_byte(var2_NewRecord, closure.var1_RecordSet, "LineType", 0);
							Altova.Db.Dbs.Read_int(var2_NewRecord, closure.var1_RecordSet, "LineOrder", 1);
							Altova.Db.Dbs.Read_string(var2_NewRecord, closure.var1_RecordSet, "DescriptionClear", 2);
							Altova.Db.Dbs.Read_decimal(var2_NewRecord, closure.var1_RecordSet, "Quantity", 3);
							Altova.Db.Dbs.Read_decimal(var2_NewRecord, closure.var1_RecordSet, "CostPrice", 4);
							Altova.Db.Dbs.Read_decimal(var2_NewRecord, closure.var1_RecordSet, "TotalDiscountRate", 5);
							Altova.Db.Dbs.Read_decimal(var2_NewRecord, closure.var1_RecordSet, "NetAmountVatExcluded", 6);
							Altova.Db.Dbs.Read_decimal(var2_NewRecord, closure.var1_RecordSet, "NetAmountVatIncluded", 7);
							Altova.Db.Dbs.Read_decimal(var2_NewRecord, closure.var1_RecordSet, "VatAmount", 8);
							Altova.Db.Dbs.Read_decimal(var2_NewRecord, closure.var1_RecordSet, "SalePriceVatExcluded", 9);
							Altova.Db.Dbs.Read_string(var2_NewRecord, closure.var1_RecordSet, "ItemId", 10);
							Altova.Db.Dbs.Read_string(var2_NewRecord, closure.var1_RecordSet, "DocumentNumber", 11);
							Altova.Db.Dbs.Read_decimal(var2_NewRecord, closure.var1_RecordSet, "rate", 12);
							current = var2_NewRecord;
							pos++;
							return true;
						}
					}
					return false;
				}

				public void Dispose() 
				{
				}
			}
		}
		class seq5_map : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;

			public seq5_map(
				Altova.Db.Record var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq5_map closure;
				private IEnumerator var2_read_field;
				public Enumerator(seq5_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "NetAmountVatExcluded")).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_read_field.MoveNext()) { state = 3; goto case 3; }
							current = Altova.CoreTypes.DecimalToDouble((decimal)(var2_read_field.Current));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
				}
			}
		}
		class seq6_map : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;

			public seq6_map(
				Altova.Db.Record var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq6_map closure;
				private IEnumerator var2_read_field;
				public Enumerator(seq6_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "SalePriceVatExcluded")).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_read_field.MoveNext()) { state = 3; goto case 3; }
							current = Altova.CoreTypes.DecimalToDouble((decimal)(var2_read_field.Current));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
				}
			}
		}
		class seq7_map : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;

			public seq7_map(
				Altova.Db.Record var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq7_map closure;
				private IEnumerator var2_read_field;
				public Enumerator(seq7_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "NetAmountVatIncluded")).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_read_field.MoveNext()) { state = 3; goto case 3; }
							current = Altova.CoreTypes.DecimalToDouble((decimal)(var2_read_field.Current));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
				}
			}
		}
		class seq8_map : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;

			public seq8_map(
				Altova.Db.Record var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq8_map closure;
				private IEnumerator var2_read_field;
				public Enumerator(seq8_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "VatAmount")).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_read_field.MoveNext()) { state = 3; goto case 3; }
							current = Altova.CoreTypes.DecimalToDouble((decimal)(var2_read_field.Current));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
				}
			}
		}
		class seq9_map : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;
			private readonly Altova.Mapforce.IMFNode var2_propal_Instance;

			public seq9_map(
				Altova.Db.Record var1_cur,
				Altova.Mapforce.IMFNode var2_propal_Instance
			)
			{
				this.var1_cur = var1_cur;
				this.var2_propal_Instance = var2_propal_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq9_map closure;
				private IEnumerator var3_join;
				public Enumerator(seq9_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_join = ((new seq10_join(closure.var1_cur, closure.var2_propal_Instance))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var3_join.MoveNext()) { state = 3; goto case 3; }
							current = var3_join.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_join); var3_join = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_join); var3_join = null;
				}
			}
		}
		class seq10_join : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;
			private readonly Altova.Mapforce.IMFNode var2_propal_Instance;

			public seq10_join(
				Altova.Db.Record var1_cur,
				Altova.Mapforce.IMFNode var2_propal_Instance
			)
			{
				this.var1_cur = var1_cur;
				this.var2_propal_Instance = var2_propal_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq10_join closure;
				private IEnumerator var3_filter_elements_nodename;
				private IEnumerator var4_filter;
				public Enumerator(seq10_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_filter_elements_nodename = (Altova.Functions.Core.FilterElements("Lignes", closure.var2_propal_Instance)).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var3_filter_elements_nodename.MoveNext()) { state = 3; goto case 3; }
							var4_filter = (Altova.Functions.Core.FilterElements("rowid", (Altova.Mapforce.IMFNode)(var3_filter_elements_nodename.Current))).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_filter_elements_nodename); var3_filter_elements_nodename = null;
							return false;
						case 4:
							state = 4;
							if (!var4_filter.MoveNext()) { state = 5; goto case 5; }
							if (!((bool)Altova.Functions.Core.First((new seq12_CoreAny((new seq11_join(closure.var1_cur, (Altova.Mapforce.IMFNode)(var3_filter_elements_nodename.Current)))))))) { state = 4; goto case 4;  }
							current = Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.ParseDecimal(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var4_filter.Current)))));
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var4_filter); var4_filter = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var4_filter); var4_filter = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_filter_elements_nodename); var3_filter_elements_nodename = null;
				}
			}
		}
		class seq11_join : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;
			private readonly Altova.Mapforce.IMFNode var2_cur;

			public seq11_join(
				Altova.Db.Record var1_cur,
				Altova.Mapforce.IMFNode var2_cur
			)
			{
				this.var1_cur = var1_cur;
				this.var2_cur = var2_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq11_join closure;
				private IEnumerator var3_read_field;
				private IEnumerator var4_filter_elements_nodename;
				public Enumerator(seq11_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "DocumentNumber")).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var3_read_field.MoveNext()) { state = 3; goto case 3; }
							var4_filter_elements_nodename = (Altova.Functions.Core.FilterElements("ref", closure.var2_cur)).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_read_field); var3_read_field = null;
							return false;
						case 4:
							state = 4;
							if (!var4_filter_elements_nodename.MoveNext()) { state = 5; goto case 5; }
							current = ((string)(var3_read_field.Current)) == (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var4_filter_elements_nodename.Current)));
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var4_filter_elements_nodename); var4_filter_elements_nodename = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var4_filter_elements_nodename); var4_filter_elements_nodename = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_read_field); var3_read_field = null;
				}
			}
		}
		class seq12_CoreAny : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_sequence;

			public seq12_CoreAny(
				System.Collections.IEnumerable var1_sequence
			)
			{
				this.var1_sequence = var1_sequence;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq12_CoreAny closure;
				private IEnumerator var2_enum;
				public Enumerator(seq12_CoreAny closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_enum = (closure.var1_sequence).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var2_enum.MoveNext()) { state = 3; goto case 3; }
							if (!((bool)(var2_enum.Current))) { state = 2; goto case 2;  }
							current = Altova.CoreTypes.ParseBoolean("true");
							pos++;
							return true;
						case 3:
							state = 4;
							current = Altova.CoreTypes.ParseBoolean("false");
							pos++;
							return true;
						case 4:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_enum); var2_enum = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_enum); var2_enum = null;
				}
			}
		}
		class seq13_map : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_product_Instance;
			private readonly Altova.Db.Record var2_cur;

			public seq13_map(
				Altova.Mapforce.IMFNode var1_product_Instance,
				Altova.Db.Record var2_cur
			)
			{
				this.var1_product_Instance = var1_product_Instance;
				this.var2_cur = var2_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq13_map closure;
				private IEnumerator var3_join;
				public Enumerator(seq13_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_join = ((new seq14_join(closure.var1_product_Instance, closure.var2_cur))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var3_join.MoveNext()) { state = 3; goto case 3; }
							current = var3_join.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_join); var3_join = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_join); var3_join = null;
				}
			}
		}
		class seq14_join : IEnumerable
		{
			private readonly Altova.Mapforce.IMFNode var1_product_Instance;
			private readonly Altova.Db.Record var2_cur;

			public seq14_join(
				Altova.Mapforce.IMFNode var1_product_Instance,
				Altova.Db.Record var2_cur
			)
			{
				this.var1_product_Instance = var1_product_Instance;
				this.var2_cur = var2_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq14_join closure;
				private IEnumerator var3_filter_elements_nodename;
				private IEnumerator var4_filter;
				public Enumerator(seq14_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_filter_elements_nodename = (Altova.Functions.Core.FilterElements("Lignes", closure.var1_product_Instance)).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var3_filter_elements_nodename.MoveNext()) { state = 3; goto case 3; }
							var4_filter = (Altova.Functions.Core.FilterElements("rowid", (Altova.Mapforce.IMFNode)(var3_filter_elements_nodename.Current))).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_filter_elements_nodename); var3_filter_elements_nodename = null;
							return false;
						case 4:
							state = 4;
							if (!var4_filter.MoveNext()) { state = 5; goto case 5; }
							if (!((bool)Altova.Functions.Core.First((new seq12_CoreAny((new seq15_join(closure.var2_cur, (Altova.Mapforce.IMFNode)(var3_filter_elements_nodename.Current)))))))) { state = 4; goto case 4;  }
							current = Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.ParseDecimal(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var4_filter.Current)))));
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var4_filter); var4_filter = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var4_filter); var4_filter = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_filter_elements_nodename); var3_filter_elements_nodename = null;
				}
			}
		}
		class seq15_join : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;
			private readonly Altova.Mapforce.IMFNode var2_cur;

			public seq15_join(
				Altova.Db.Record var1_cur,
				Altova.Mapforce.IMFNode var2_cur
			)
			{
				this.var1_cur = var1_cur;
				this.var2_cur = var2_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq15_join closure;
				private IEnumerator var3_read_field;
				private IEnumerator var4_filter_elements_nodename;
				public Enumerator(seq15_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "ItemId")).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var3_read_field.MoveNext()) { state = 3; goto case 3; }
							var4_filter_elements_nodename = (Altova.Functions.Core.FilterElements("ref", closure.var2_cur)).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_read_field); var3_read_field = null;
							return false;
						case 4:
							state = 4;
							if (!var4_filter_elements_nodename.MoveNext()) { state = 5; goto case 5; }
							current = ((string)(var3_read_field.Current)) == (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var4_filter_elements_nodename.Current)));
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var4_filter_elements_nodename); var4_filter_elements_nodename = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var4_filter_elements_nodename); var4_filter_elements_nodename = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_read_field); var3_read_field = null;
				}
			}
		}
		class seq16_map : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;

			public seq16_map(
				Altova.Db.Record var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq16_map closure;
				private IEnumerator var2_read_field;
				public Enumerator(seq16_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "rate")).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_read_field.MoveNext()) { state = 3; goto case 3; }
							current = Altova.CoreTypes.DecimalToDouble((decimal)(var2_read_field.Current));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
				}
			}
		}
		class seq17_join : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;
			private readonly System.Collections.IEnumerable var2_read_field;

			public seq17_join(
				Altova.Db.Record var1_cur,
				System.Collections.IEnumerable var2_read_field
			)
			{
				this.var1_cur = var1_cur;
				this.var2_read_field = var2_read_field;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq17_join closure;
				private IEnumerator var3_read_field;
				private IEnumerator var4_read_field;
				public Enumerator(seq17_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var3_read_field = (closure.var2_read_field).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var3_read_field.MoveNext()) { state = 3; goto case 3; }
							var4_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "Quantity")).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var3_read_field); var3_read_field = null;
							return false;
						case 4:
							state = 4;
							if (!var4_read_field.MoveNext()) { state = 5; goto case 5; }
							current = Altova.CoreTypes.DecimalToDouble(Altova.Functions.Core.Add(Altova.CoreTypes.ParseDecimal(vmf.vmf1_entretorsultat.Eval(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.ULongToDecimal((ulong)(var3_read_field.Current))))), (decimal)(var4_read_field.Current)));
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var4_read_field); var4_read_field = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var4_read_field); var4_read_field = null;
					Altova.Mapforce.MFEnumerator.Dispose(var3_read_field); var3_read_field = null;
				}
			}
		}
		class seq18_map : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;

			public seq18_map(
				Altova.Db.Record var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq18_map closure;
				private IEnumerator var2_read_field;
				public Enumerator(seq18_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "TotalDiscountRate")).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_read_field.MoveNext()) { state = 3; goto case 3; }
							current = Altova.CoreTypes.DecimalToDouble((decimal)(var2_read_field.Current));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
				}
			}
		}
		class seq19_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_read_field;

			public seq19_join(
				System.Collections.IEnumerable var1_read_field
			)
			{
				this.var1_read_field = var1_read_field;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq19_join closure;
				private IEnumerator var2_read_field;
				private IEnumerator var3_vmf2_entretorsultat;
				public Enumerator(seq19_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_read_field = (closure.var1_read_field).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var2_read_field.MoveNext()) { state = 3; goto case 3; }
							var3_vmf2_entretorsultat = (vmf.vmf2_entretorsultat.Eval(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.ULongToDecimal((ulong)(var2_read_field.Current))))).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
							return false;
						case 4:
							state = 4;
							if (!var3_vmf2_entretorsultat.MoveNext()) { state = 5; goto case 5; }
							current = Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.ParseDecimal((string)(var3_vmf2_entretorsultat.Current))));
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var3_vmf2_entretorsultat); var3_vmf2_entretorsultat = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_vmf2_entretorsultat); var3_vmf2_entretorsultat = null;
					Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
				}
			}
		}
		class seq20_map : IEnumerable
		{
			private readonly Altova.Db.Record var1_cur;

			public seq20_map(
				Altova.Db.Record var1_cur
			)
			{
				this.var1_cur = var1_cur;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq20_map closure;
				private IEnumerator var2_read_field;
				public Enumerator(seq20_map closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_read_field = (Altova.Db.Dbs.ReadField(closure.var1_cur, "CostPrice")).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var2_read_field.MoveNext()) { state = 3; goto case 3; }
							current = Altova.CoreTypes.DecimalToDouble((decimal)(var2_read_field.Current));
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
				}
			}
		}
		class seq21_join : IEnumerable
		{
			private readonly System.Collections.IEnumerable var1_read_field;

			public seq21_join(
				System.Collections.IEnumerable var1_read_field
			)
			{
				this.var1_read_field = var1_read_field;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly seq21_join closure;
				private IEnumerator var2_read_field;
				private IEnumerator var3_vmf2_entretorsultat;
				public Enumerator(seq21_join closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var2_read_field = (closure.var1_read_field).GetEnumerator();
							goto case 2;
						case 2:
							state = 4;
							if (!var2_read_field.MoveNext()) { state = 3; goto case 3; }
							var3_vmf2_entretorsultat = (vmf.vmf2_entretorsultat.Eval(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.ULongToDecimal((ulong)(var2_read_field.Current))))).GetEnumerator();
							goto case 4;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
							return false;
						case 4:
							state = 4;
							if (!var3_vmf2_entretorsultat.MoveNext()) { state = 5; goto case 5; }
							current = Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.ParseDecimal(vmf.vmf3_entretorsultat.Eval((string)(var3_vmf2_entretorsultat.Current)))));
							pos++;
							return true;
						case 5:
							state = 2;
							Altova.Mapforce.MFEnumerator.Dispose(var3_vmf2_entretorsultat); var3_vmf2_entretorsultat = null;
							goto case 2;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var3_vmf2_entretorsultat); var3_vmf2_entretorsultat = null;
					Altova.Mapforce.MFEnumerator.Dispose(var2_read_field); var2_read_field = null;
				}
			}
		}
		class Outer : IEnumerable
		{
			private readonly Altova.Db.Catalog var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;
			private readonly Altova.Mapforce.IMFNode var2_product_Instance;
			private readonly Altova.Mapforce.IMFNode var3_propal_Instance;

			public Outer(
				Altova.Db.Catalog var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance,
				Altova.Mapforce.IMFNode var2_product_Instance,
				Altova.Mapforce.IMFNode var3_propal_Instance
			)
			{
				this.var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance = var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance;
				this.var2_product_Instance = var2_product_Instance;
				this.var3_propal_Instance = var3_propal_Instance;
			}

			public IEnumerator GetEnumerator() { return new Enumerator(this); }

			class Enumerator : Altova.Mapforce.IMFEnumerator
			{
				private int state = 1;
				private object current = null;
				private int pos = 0;
				private readonly Outer closure;
				private IEnumerator var4_box;
				public Enumerator(Outer closure) 
				{
					this.closure = closure;
				}

				public void Reset() { state = 0; pos = 0;}
				public int Position { get { return pos; } }
				public object Current { get { return current; } }

				public bool MoveNext()
				{
					while (state != 0)
					{
						switch (state) 
						{
						case 1:
							state = 2;
							var4_box = ((new main(closure.var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, closure.var2_product_Instance, closure.var3_propal_Instance))).GetEnumerator();
							goto case 2;
						case 2:
							state = 2;
							if (!var4_box.MoveNext()) { state = 3; goto case 3; }
							current = var4_box.Current;
							pos++;
							return true;
						case 3:
							state = 0;
							Altova.Mapforce.MFEnumerator.Dispose(var4_box); var4_box = null;
							return false;
						}
					}
					return false;
				}

				public void Dispose() 
				{
					Altova.Mapforce.MFEnumerator.Dispose(var4_box); var4_box = null;
				}
			}
		}

	}
}
