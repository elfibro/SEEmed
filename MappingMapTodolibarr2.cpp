////////////////////////////////////////////////////////////////////////
//
// MappingMapTodolibarr2.cpp
//
// This file was generated by MapForce 2023r2.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////


#include "StdAfx.h"
#include "Resource.h"
using namespace std;
#include "MappingMapTodolibarr2.h"




#ifdef _DEBUG
	#define new DEBUG_NEW
	#undef THIS_FILE
	static char THIS_FILE[] = __FILE__;
#endif
	MappingMapTodolibarr2::MappingMapTodolibarr2() {}
	bool MappingMapTodolibarr2::main::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 0;				
						var4_NewStatement = (altova::db::Dbs::NewStatement(closure->var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, 1, string_type(_T("SELECT \r  SDL.LineType, \r  SDL.LineOrder, \r  SDL.DescriptionClear, \r  SDL.Quantity, \r  SDL.CostPrice, \r  SDL.TotalDiscountRate, \r  SDL.NetAmountVatExcluded, \r  SDL.NetAmountVatIncluded, \r  SD")
 _T("L.VatAmount, \r  SDL.SalePriceVatExcluded,\r  SDL.ItemId,\r  SD.DocumentNumber,\r  V.rate\rFROM \r  SaleDocument AS SD\rJOIN \r  SaleDocumentLine AS SDL ON SD.Id = SDL.DocumentId\rJOIN \r  Vat AS V ON")
 _T(" SDL.VatID = V.ID\rWHERE \r  SD.NumberPrefix = \'DE\' \rAND \r  SD.NumberSuffix > 13000\rORDER BY \r  SD.DocumentNumber DESC;\r"))));
						altova::db::Dbs::PrepareStatement(var4_NewStatement);
						var5_NewStatement = (altova::db::Dbs::NewStatement(closure->var2_dolibarr2_Instance, 2, string_type(_T("SELECT \r  llx_propal.rowid,\r  llx_propal.ref\rFROM \r  llx_propal\rORDER BY \r  llx_propal.ref DESC;\r"))));
						altova::db::Dbs::PrepareStatement(var5_NewStatement);
						var6_NewStatement = (altova::db::Dbs::NewStatement(closure->var3_dolibarr2_Instance, 3, string_type(_T("SELECT \r  llx_product.rowid,\r  llx_product.ref\rFROM \r  llx_product\r\r"))));
						altova::db::Dbs::PrepareStatement(var6_NewStatement);
						current = altova::Core::WrapType((altova::db::record_type)Core::First(new seq1_NewRecord(closure->var3_dolibarr2_Instance, closure->var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, closure->var2_dolibarr2_Instance)));
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq1_NewRecord::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 0;				
						var4_NewRecord = (altova::db::Dbs::NewRecord());
						altova::db::Dbs::AddChildren(var4_NewRecord, string_type(_T("llx_propaldet|0")), new seq2_map(closure->var1_dolibarr2_Instance, closure->var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, closure->var3_dolibarr2_Instance));
						current = altova::Core::WrapType(var4_NewRecord);
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq2_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var4_ReadRecordSet = (altova::db::Dbs::ReadRecordSet((altova::db::recordset_type)Core::First(new seq3_NewQuery(closure->var2_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance)), new seq4_NewRecord_lambda()))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var4_ReadRecordSet->MoveNext()) { state = 3; break; /* goto case 3; */ }
						var5_NewRecord = (altova::db::Dbs::NewRecord());
						var6_read_field = new altova::Core::SequenceCache(altova::db::Dbs::ReadField((altova::db::record_type)var4_ReadRecordSet->GetCurrent(), string_type(_T("LineType"))));
						var7_map = new altova::Core::SequenceCache(new seq5_map((altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						var8_map = new altova::Core::SequenceCache(new seq6_map((altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						var9_map = new altova::Core::SequenceCache(new seq7_map((altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						var10_map = new altova::Core::SequenceCache(new seq8_map((altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("fk_propal")), new seq9_map(closure->var3_dolibarr2_Instance, (altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("fk_product")), new seq16_map(closure->var1_dolibarr2_Instance, (altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("description")), altova::db::Dbs::ReadField((altova::db::record_type)var4_ReadRecordSet->GetCurrent(), string_type(_T("DescriptionClear"))));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("tva_tx")), new seq20_map((altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("qty")), new seq21_join(var6_read_field, (altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("remise_percent")), new seq22_map((altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("subprice")), var10_map);
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("total_ht")), var7_map);
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("total_tva")), var8_map);
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("total_ttc")), var9_map);
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("product_type")), new seq23_join(var6_read_field));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("buy_price_ht")), new seq24_map((altova::db::record_type)var4_ReadRecordSet->GetCurrent()));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("special_code")), new seq25_join(var6_read_field));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("rang")), altova::db::Dbs::ReadField((altova::db::record_type)var4_ReadRecordSet->GetCurrent(), string_type(_T("LineOrder"))));
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("multicurrency_subprice")), var10_map);
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("multicurrency_total_ht")), var7_map);
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("multicurrency_total_tva")), var8_map);
						altova::db::Dbs::WriteField(var5_NewRecord, string_type(_T("multicurrency_total_ttc")), var9_map);
						current = altova::Core::WrapType(var5_NewRecord);
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var4_ReadRecordSet; 
					    var4_ReadRecordSet = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq3_NewQuery::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 0;				
						var2_NewQuery = (altova::db::Dbs::NewQuery(closure->var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, 1));
						current = altova::Core::WrapType(altova::db::Dbs::ExecuteQuery(var2_NewQuery));
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq4_NewRecord::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 0;				
						var2_NewRecord = (altova::db::Dbs::NewRecord());
						altova::db::Dbs::Read_byte(var2_NewRecord, closure->var1_RecordSet, string_type(_T("LineType")), 0);
						altova::db::Dbs::Read_int(var2_NewRecord, closure->var1_RecordSet, string_type(_T("LineOrder")), 1);
						altova::db::Dbs::Read_string(var2_NewRecord, closure->var1_RecordSet, string_type(_T("DescriptionClear")), 2);
						altova::db::Dbs::Read_decimal(var2_NewRecord, closure->var1_RecordSet, string_type(_T("Quantity")), 3);
						altova::db::Dbs::Read_decimal(var2_NewRecord, closure->var1_RecordSet, string_type(_T("CostPrice")), 4);
						altova::db::Dbs::Read_decimal(var2_NewRecord, closure->var1_RecordSet, string_type(_T("TotalDiscountRate")), 5);
						altova::db::Dbs::Read_decimal(var2_NewRecord, closure->var1_RecordSet, string_type(_T("NetAmountVatExcluded")), 6);
						altova::db::Dbs::Read_decimal(var2_NewRecord, closure->var1_RecordSet, string_type(_T("NetAmountVatIncluded")), 7);
						altova::db::Dbs::Read_decimal(var2_NewRecord, closure->var1_RecordSet, string_type(_T("VatAmount")), 8);
						altova::db::Dbs::Read_decimal(var2_NewRecord, closure->var1_RecordSet, string_type(_T("SalePriceVatExcluded")), 9);
						altova::db::Dbs::Read_string(var2_NewRecord, closure->var1_RecordSet, string_type(_T("ItemId")), 10);
						altova::db::Dbs::Read_string(var2_NewRecord, closure->var1_RecordSet, string_type(_T("DocumentNumber")), 11);
						altova::db::Dbs::Read_decimal(var2_NewRecord, closure->var1_RecordSet, string_type(_T("rate")), 12);
						current = altova::Core::WrapType(var2_NewRecord);
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq5_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("NetAmountVatExcluded"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var2_read_field->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq6_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("VatAmount"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var2_read_field->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq7_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("NetAmountVatIncluded"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var2_read_field->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq8_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("SalePriceVatExcluded"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var2_read_field->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq9_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var3_join = (new seq10_join(closure->var1_dolibarr2_Instance, closure->var2_cur))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var3_join->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var3_join->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var3_join; 
					    var3_join = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq10_join::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var3_ReadRecordSet = (altova::db::Dbs::ReadRecordSet((altova::db::recordset_type)Core::First(new seq11_NewQuery(closure->var1_dolibarr2_Instance)), new seq12_NewRecord_lambda()))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 4;				
						if (!var3_ReadRecordSet->MoveNext()) { state = 3; break; /* goto case 3; */ }
						var4_map = (new seq13_map((altova::db::record_type)var3_ReadRecordSet->GetCurrent()))->GetEnumerator();
						break;
					}
					case 3:
					{
						state = 0;				
						delete var3_ReadRecordSet; 
					    var3_ReadRecordSet = 0;
						return false;
					}
					case 4:
					{
						state = 4;				
						if (!var4_map->MoveNext()) { state = 5; break; /* goto case 5; */ }
						if (!((bool)Core::First(new seq15_CoreAny(new seq14_join(closure->var2_cur, (altova::db::record_type)var3_ReadRecordSet->GetCurrent()))))) { state = 4; break; /* goto case 4; */  }
						current = altova::Core::WrapType(var4_map->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 5:
					{
						state = 2;				
						delete var4_map; 
					    var4_map = 0;
						break;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq11_NewQuery::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 0;				
						var2_NewQuery = (altova::db::Dbs::NewQuery(closure->var1_dolibarr2_Instance, 2));
						current = altova::Core::WrapType(altova::db::Dbs::ExecuteQuery(var2_NewQuery));
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq12_NewRecord::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 0;				
						var2_NewRecord = (altova::db::Dbs::NewRecord());
						altova::db::Dbs::Read_int(var2_NewRecord, closure->var1_RecordSet, string_type(_T("rowid")), 0);
						altova::db::Dbs::Read_string(var2_NewRecord, closure->var1_RecordSet, string_type(_T("ref")), 1);
						current = altova::Core::WrapType(var2_NewRecord);
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq13_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("rowid"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var2_read_field->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq14_join::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var3_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("DocumentNumber"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 4;				
						if (!var3_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						var4_read_field = (altova::db::Dbs::ReadField(closure->var2_cur, string_type(_T("ref"))))->GetEnumerator();
						break;
					}
					case 3:
					{
						state = 0;				
						delete var3_read_field; 
					    var3_read_field = 0;
						return false;
					}
					case 4:
					{
						state = 4;				
						if (!var4_read_field->MoveNext()) { state = 5; break; /* goto case 5; */ }
						current = altova::Core::WrapType(((string_type)var3_read_field->GetCurrent())==((string_type)var4_read_field->GetCurrent()));
						
						pos++;
						return true;
						break;
					}
					case 5:
					{
						state = 2;				
						delete var4_read_field; 
					    var4_read_field = 0;
						break;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq15_CoreAny::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_enum = (closure->var1_sequence)->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 4;				
						if (!var2_enum->MoveNext()) { state = 3; break; /* goto case 3; */ }
						if (!((bool)var2_enum->GetCurrent())) { state = 2; break; /* goto case 2; */  }
						current = altova::Core::WrapType(altova::CoreTypes::ParseBoolean(_T("true")));
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 4;				
						current = altova::Core::WrapType(altova::CoreTypes::ParseBoolean(_T("false")));
						
						pos++;
						return true;
						break;
					}
					case 4:
					{
						state = 0;				
						delete var2_enum; 
					    var2_enum = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq16_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var3_join = (new seq17_join(closure->var1_dolibarr2_Instance, closure->var2_cur))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var3_join->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var3_join->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var3_join; 
					    var3_join = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq17_join::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var3_ReadRecordSet = (altova::db::Dbs::ReadRecordSet((altova::db::recordset_type)Core::First(new seq18_NewQuery(closure->var1_dolibarr2_Instance)), new seq12_NewRecord_lambda()))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 4;				
						if (!var3_ReadRecordSet->MoveNext()) { state = 3; break; /* goto case 3; */ }
						var4_map = (new seq13_map((altova::db::record_type)var3_ReadRecordSet->GetCurrent()))->GetEnumerator();
						break;
					}
					case 3:
					{
						state = 0;				
						delete var3_ReadRecordSet; 
					    var3_ReadRecordSet = 0;
						return false;
					}
					case 4:
					{
						state = 4;				
						if (!var4_map->MoveNext()) { state = 5; break; /* goto case 5; */ }
						if (!((bool)Core::First(new seq15_CoreAny(new seq19_join(closure->var2_cur, (altova::db::record_type)var3_ReadRecordSet->GetCurrent()))))) { state = 4; break; /* goto case 4; */  }
						current = altova::Core::WrapType(var4_map->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 5:
					{
						state = 2;				
						delete var4_map; 
					    var4_map = 0;
						break;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq18_NewQuery::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 0;				
						var2_NewQuery = (altova::db::Dbs::NewQuery(closure->var1_dolibarr2_Instance, 3));
						current = altova::Core::WrapType(altova::db::Dbs::ExecuteQuery(var2_NewQuery));
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq19_join::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var3_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("ItemId"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 4;				
						if (!var3_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						var4_read_field = (altova::db::Dbs::ReadField(closure->var2_cur, string_type(_T("ref"))))->GetEnumerator();
						break;
					}
					case 3:
					{
						state = 0;				
						delete var3_read_field; 
					    var3_read_field = 0;
						return false;
					}
					case 4:
					{
						state = 4;				
						if (!var4_read_field->MoveNext()) { state = 5; break; /* goto case 5; */ }
						current = altova::Core::WrapType(((string_type)var3_read_field->GetCurrent())==((string_type)var4_read_field->GetCurrent()));
						
						pos++;
						return true;
						break;
					}
					case 5:
					{
						state = 2;				
						delete var4_read_field; 
					    var4_read_field = 0;
						break;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq20_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("rate"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var2_read_field->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq21_join::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var3_read_field = (closure->var1_read_field)->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 4;				
						if (!var3_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						var4_read_field = (altova::db::Dbs::ReadField(closure->var2_cur, string_type(_T("Quantity"))))->GetEnumerator();
						break;
					}
					case 3:
					{
						state = 0;				
						delete var3_read_field; 
					    var3_read_field = 0;
						return false;
					}
					case 4:
					{
						state = 4;				
						if (!var4_read_field->MoveNext()) { state = 5; break; /* goto case 5; */ }
						current = altova::Core::WrapType(Core::Add(altova::CoreTypes::ParseDouble(vmf::vmf1_entretorsultat::Eval(altova::CoreTypes::ULongToString((unsigned __int64)var3_read_field->GetCurrent()))), (double)var4_read_field->GetCurrent()));
						
						pos++;
						return true;
						break;
					}
					case 5:
					{
						state = 2;				
						delete var4_read_field; 
					    var4_read_field = 0;
						break;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq22_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("TotalDiscountRate"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var2_read_field->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq23_join::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (closure->var1_read_field)->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 4;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						var3_vmf2_entretorsultat = (vmf::vmf2_entretorsultat::Eval(altova::CoreTypes::ULongToString((unsigned __int64)var2_read_field->GetCurrent())))->GetEnumerator();
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
					case 4:
					{
						state = 4;				
						if (!var3_vmf2_entretorsultat->MoveNext()) { state = 5; break; /* goto case 5; */ }
						current = altova::Core::WrapType(altova::CoreTypes::LongToInt(altova::CoreTypes::ParseLong((string_type)var3_vmf2_entretorsultat->GetCurrent())));
						
						pos++;
						return true;
						break;
					}
					case 5:
					{
						state = 2;				
						delete var3_vmf2_entretorsultat; 
					    var3_vmf2_entretorsultat = 0;
						break;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq24_map::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (altova::db::Dbs::ReadField(closure->var1_cur, string_type(_T("CostPrice"))))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var2_read_field->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::seq25_join::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var2_read_field = (closure->var1_read_field)->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 4;				
						if (!var2_read_field->MoveNext()) { state = 3; break; /* goto case 3; */ }
						var3_vmf2_entretorsultat = (vmf::vmf2_entretorsultat::Eval(altova::CoreTypes::ULongToString((unsigned __int64)var2_read_field->GetCurrent())))->GetEnumerator();
						break;
					}
					case 3:
					{
						state = 0;				
						delete var2_read_field; 
					    var2_read_field = 0;
						return false;
					}
					case 4:
					{
						state = 4;				
						if (!var3_vmf2_entretorsultat->MoveNext()) { state = 5; break; /* goto case 5; */ }
						current = altova::Core::WrapType(altova::CoreTypes::LongToInt(altova::CoreTypes::ParseLong(vmf::vmf3_entretorsultat::Eval((string_type)var3_vmf2_entretorsultat->GetCurrent()))));
						
						pos++;
						return true;
						break;
					}
					case 5:
					{
						state = 2;				
						delete var3_vmf2_entretorsultat; 
					    var3_vmf2_entretorsultat = 0;
						break;
					}
				}
			}
			return false;
	}
	
	bool MappingMapTodolibarr2::Outer::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 2;				
						var4_box = (new main(closure->var1_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4_Instance, closure->var2_dolibarr2_Instance, closure->var3_dolibarr2_Instance))->GetEnumerator();
						break;
					}
					case 2:
					{
						state = 2;				
						if (!var4_box->MoveNext()) { state = 3; break; /* goto case 3; */ }
						current = altova::Core::WrapType(var4_box->GetCurrent());
						
						pos++;
						return true;
						break;
					}
					case 3:
					{
						state = 0;				
						delete var4_box; 
					    var4_box = 0;
						return false;
					}
				}
			}
			return false;
	}
	


	namespace ActionBefore_llx_propaldet
	{
	class main : public altova::mapforce::Enumerable
	{
	public:
		altova::db::Catalog* var1_catalog;
	
		main(altova::db::Catalog* a_var1_catalog) : altova::mapforce::Enumerable(), var1_catalog(a_var1_catalog) {}

		~main()	
		{
		}

		altova::mapforce::Enumerator* GetEnumerator() {return new Enum(this);}
		
		class Enum : public altova::mapforce::Enumerator
		{
		public:
			int state;
			altova::mapforce::IMFNode current;
			main* closure;

			Enum(main* cls) : Enumerator(cls), state(1), closure(cls) 
			{
			}

			~Enum() 
			{

			}
			
			altova::mapforce::IMFNode GetCurrent() {return current;}
			
			bool MoveNext();
		};
	};

	bool main::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 0;				
						altova::db::Dbs::ExecuteNonReader(altova::db::Dbs::NewQuery(closure->var1_catalog, 1));
						current = altova::Core::WrapType(altova::CoreTypes::ParseBoolean(_T("true")));
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	

	};

	namespace Action_llx_propaldet
	{
	class main : public altova::mapforce::Enumerable
	{
	public:
		altova::db::Catalog* var1_catalog;
		altova::db::record_type var2_record;
	
		main(altova::db::Catalog* a_var1_catalog, const altova::db::record_type& a_var2_record) : altova::mapforce::Enumerable(), var1_catalog(a_var1_catalog), var2_record(a_var2_record) {}

		~main()	
		{
		}

		altova::mapforce::Enumerator* GetEnumerator() {return new Enum(this);}
		
		class Enum : public altova::mapforce::Enumerator
		{
		public:
			int state;
			altova::mapforce::IMFNode current;
			main* closure;
			altova::db::Query var3_NewQuery;

			Enum(main* cls) : Enumerator(cls), state(1), closure(cls) 
			{
			}

			~Enum() 
			{

			}
			
			altova::mapforce::IMFNode GetCurrent() {return current;}
			
			bool MoveNext();
		};
	};

	class main_lambda : public altova::mapforce::Invokable<altova::mapforce::Enumerable*>
	{ 
		altova::db::Catalog* p1;

	public:
		main_lambda(altova::db::Catalog* _p1) :  p1(_p1), altova::mapforce::Invokable<altova::mapforce::Enumerable*>()
		{
		}
		
		~main_lambda()
		{
		}
			
		altova::mapforce::Enumerable* Invoke(altova::mapforce::IMFNode& param) {return new main((altova::db::Catalog*)p1, (altova::db::record_type)param);}
	};

	bool main::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 3;				
						var3_NewQuery = (altova::db::Dbs::NewQuery(closure->var1_catalog, 2));
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("fk_propal")))))) { state = 2; break; /* goto case 2; */  }
						altova::db::Dbs::BindParameter_Int(var3_NewQuery, (int)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("fk_propal")))));
						break;
					}
					case 2:
					{
						state = 3;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 3:
					{
						state = 5;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("fk_product")))))) { state = 4; break; /* goto case 4; */  }
						altova::db::Dbs::BindParameter_Int(var3_NewQuery, (int)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("fk_product")))));
						break;
					}
					case 4:
					{
						state = 5;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 5:
					{
						state = 7;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("description")))))) { state = 6; break; /* goto case 6; */  }
						altova::db::Dbs::BindParameter_String(var3_NewQuery, (string_type)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("description")))));
						break;
					}
					case 6:
					{
						state = 7;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 7:
					{
						state = 9;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("tva_tx")))))) { state = 8; break; /* goto case 8; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("tva_tx")))));
						break;
					}
					case 8:
					{
						state = 9;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 9:
					{
						state = 11;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("qty")))))) { state = 10; break; /* goto case 10; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("qty")))));
						break;
					}
					case 10:
					{
						state = 11;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 11:
					{
						state = 13;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("remise_percent")))))) { state = 12; break; /* goto case 12; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("remise_percent")))));
						break;
					}
					case 12:
					{
						state = 13;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 13:
					{
						state = 15;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("subprice")))))) { state = 14; break; /* goto case 14; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("subprice")))));
						break;
					}
					case 14:
					{
						state = 15;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 15:
					{
						state = 17;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("total_ht")))))) { state = 16; break; /* goto case 16; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("total_ht")))));
						break;
					}
					case 16:
					{
						state = 17;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 17:
					{
						state = 19;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("total_tva")))))) { state = 18; break; /* goto case 18; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("total_tva")))));
						break;
					}
					case 18:
					{
						state = 19;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 19:
					{
						state = 21;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("total_ttc")))))) { state = 20; break; /* goto case 20; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("total_ttc")))));
						break;
					}
					case 20:
					{
						state = 21;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 21:
					{
						state = 23;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("product_type")))))) { state = 22; break; /* goto case 22; */  }
						altova::db::Dbs::BindParameter_Int(var3_NewQuery, (int)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("product_type")))));
						break;
					}
					case 22:
					{
						state = 23;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 23:
					{
						state = 25;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("buy_price_ht")))))) { state = 24; break; /* goto case 24; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("buy_price_ht")))));
						break;
					}
					case 24:
					{
						state = 25;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 25:
					{
						state = 27;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("special_code")))))) { state = 26; break; /* goto case 26; */  }
						altova::db::Dbs::BindParameter_Int(var3_NewQuery, (int)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("special_code")))));
						break;
					}
					case 26:
					{
						state = 27;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 27:
					{
						state = 29;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("rang")))))) { state = 28; break; /* goto case 28; */  }
						altova::db::Dbs::BindParameter_Int(var3_NewQuery, (int)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("rang")))));
						break;
					}
					case 28:
					{
						state = 29;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 29:
					{
						state = 31;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("multicurrency_subprice")))))) { state = 30; break; /* goto case 30; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("multicurrency_subprice")))));
						break;
					}
					case 30:
					{
						state = 31;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 31:
					{
						state = 33;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("multicurrency_total_ht")))))) { state = 32; break; /* goto case 32; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("multicurrency_total_ht")))));
						break;
					}
					case 32:
					{
						state = 33;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 33:
					{
						state = 35;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("multicurrency_total_tva")))))) { state = 34; break; /* goto case 34; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("multicurrency_total_tva")))));
						break;
					}
					case 34:
					{
						state = 35;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 35:
					{
						state = 37;				
						if (!(altova::Core::Exists(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("multicurrency_total_ttc")))))) { state = 36; break; /* goto case 36; */  }
						altova::db::Dbs::BindParameter_Double(var3_NewQuery, (double)Core::First(altova::db::Dbs::ReadField(closure->var2_record, string_type(_T("multicurrency_total_ttc")))));
						break;
					}
					case 36:
					{
						state = 37;				
						altova::db::Dbs::BindParameter_Empty(var3_NewQuery);
						break;
					}
					case 37:
					{
						state = 0;				
						current = altova::Core::WrapType((altova::CoreTypes::LongToDouble(altova::CoreTypes::IntToLong(altova::db::Dbs::ExecuteNonReader(var3_NewQuery))))!=(altova::CoreTypes::LongToDouble(altova::CoreTypes::IntToLong(0))));
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	
		
	};

void MappingMapTodolibarr2::WriteDB_llx_propaldet(altova::db::record_type& parent, altova::db::record_type& record, altova::db::Catalog* target, altova::db::TransactionHelper& transactionHelper)
{
	try
	{
		Action_llx_propaldet::main* actionSequence = 
			new Action_llx_propaldet::main(target, record);
		altova::mapforce::IEnumerator actionSequenceEnum = actionSequence->GetEnumerator();
		actionSequenceEnum.MoveNext();
		bool bProcessChildren = (bool) actionSequenceEnum.GetCurrent();

		if (bProcessChildren)
		{
		}
	}
	catch(_com_error& e)
	{
		(e);
		throw;
	}
	catch(std::exception& e)
	{
		(e);
		throw;
	}
	catch(...)
	{
		throw;
	}
}
namespace MapTodolibarr2_Setup
{
	class main : public altova::mapforce::Enumerable
	{
	public:
		altova::db::Catalog* var1_catalog;
	
		main(altova::db::Catalog* a_var1_catalog) : altova::mapforce::Enumerable(), var1_catalog(a_var1_catalog) {}

		~main()	
		{
		}

		altova::mapforce::Enumerator* GetEnumerator() {return new Enum(this);}
		
		class Enum : public altova::mapforce::Enumerator
		{
		public:
			int state;
			altova::mapforce::IMFNode current;
			main* closure;
			altova::db::Statement var2_NewStatement;

			Enum(main* cls) : Enumerator(cls), state(1), closure(cls) 
			{
			}

			~Enum() 
			{

			}
			
			altova::mapforce::IMFNode GetCurrent() {return current;}
			
			bool MoveNext();
		};
	};

	bool main::Enum::MoveNext()
	{
			while (state != 0)
			{
				switch (state) 
				{
					case 1:
					{
						state = 0;				
						altova::db::Dbs::PrepareStatement(altova::db::Dbs::NewStatement(closure->var1_catalog, 1, string_type(_T("DELETE FROM `llx_propaldet`"))));
						var2_NewStatement = (altova::db::Dbs::NewStatement(closure->var1_catalog, 2, string_type(_T("INSERT INTO `llx_propaldet` (`fk_propal`, `fk_product`, `description`, `tva_tx`, `qty`, `remise_percent`, `subprice`, `total_ht`, `total_tva`, `total_ttc`, `product_type`, `buy_price_ht`, `special_cod")
 _T("e`, `rang`, `multicurrency_subprice`, `multicurrency_total_ht`, `multicurrency_total_tva`, `multicurrency_total_ttc`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"))));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adInteger));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adInteger));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adBSTR,65535,-1,-1));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adInteger));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adInteger));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adInteger));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::AddParameter(var2_NewStatement, altova::db::TParameter(ADODB::adDouble));
						altova::db::Dbs::PrepareStatement(var2_NewStatement);
						current = altova::Core::WrapType(altova::CoreTypes::ParseBoolean(_T("true")));
						
						pos++;
						return true;
						return false;
					}
				}
			}
			return false;
	}
	

};

void MappingMapTodolibarr2::WriteDB(altova::mapforce::Enumerable* mapping, altova::db::Catalog* target)
{
	altova::mapforce::IEnumerator en(mapping);
	en.MoveNext();
	altova::db::record_type record = en.GetCurrent();

	altova::mapforce::IEnumerator setup_en = (new MapTodolibarr2_Setup::main (target))->GetEnumerator();
	setup_en.MoveNext();

	altova::db::TransactionHelper transactionHelper(target->GetConnection(), _T("START TRANSACTION"), _T("COMMIT"), _T("ROLLBACK"), _T("SAVEPOINT  %%TRANSACTION_NAME%% "), _T("ROLLBACK TO SAVEPOINT  %%TRANSACTION_NAME%% "));
	altova::db::TransactionSentinel sentinel(&transactionHelper, _T(""));
	try
	{
		ActionBefore_llx_propaldet::main* actionBeforeSequence_llx_propaldet = new ActionBefore_llx_propaldet::main(target);
		altova::mapforce::IEnumerator actionBeforeSequence_llx_propaldet_Enum = actionBeforeSequence_llx_propaldet->GetEnumerator();
		actionBeforeSequence_llx_propaldet_Enum.MoveNext();
		
		altova::mapforce::IEnumerator en_action_llx_propaldet = record->m_children[_T("llx_propaldet|0")]->GetEnumerator();
		while (en_action_llx_propaldet.MoveNext())
		{
			altova::db::record_type rec = en_action_llx_propaldet.GetCurrent();
			WriteDB_llx_propaldet(record, rec, target, transactionHelper);
		}

		sentinel.Commit();
	}
	catch( _com_error& e)
	{
		sentinel.Rollback();
		// report the error and continue with next component
#ifdef UNICODE
		TCHAR* source = e.Source();
		source = source ? source : _T("unknown");
		TCHAR* description = e.Description();
		description = description ? description : _T("no further information available");
#else
		_bstr_t src = e.Source();
		string_type source = (string_type)(((TCHAR*)src) ? src : "unknown");
		_bstr_t desc = e.Description();
		string_type description = (string_type)(((TCHAR*)desc) ? desc : "no further information available");
#endif
		tcerr << _T("COM-Error from ") << source << _T(":") << endl;
		tcerr << description << endl;
		tcerr << _T("Continue execution.") << endl;
	}
	catch(std::exception& e)
	{
		sentinel.Rollback();
		// report the error and continue with next component
		cerr << "Exception: " << e.what() << endl;
		cerr << "Continue execution." << endl;
	}
	catch(...)
	{
		sentinel.Rollback();
		// report the error and continue with next component
		tcerr << _T("Unknown error") << endl;
		tcerr << _T("Continue execution.") << endl;
	}

}

void MappingMapTodolibarr2::Run(tstring SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4SourceConnectionString, tstring dolibarr22SourceConnectionString, tstring dolibarr23SourceConnectionString, tstring dolibarr2TargetConnectionString)
{
	// Open the source(s)
	try
	{
		m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance.CreateInstance(__uuidof(ADODB::Connection));
		m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance->Open(SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4SourceConnectionString.c_str(), _bstr_t(), _bstr_t(), 0);
	}
	catch (_com_error& error)
	{
		throw altova::DataSourceUnavailableException(string_type(_T("Open database failed: ")) + string_type(error.ErrorMessage())
			+  string_type(_T("\r\n")) + string_type(error.Description()));
	}
#if __cplusplus < 201103L
	std::auto_ptr<altova::db::Catalog> SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4InstanceCatalog( new altova::db::Catalog(m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance, 60) );
#else
	std::unique_ptr<altova::db::Catalog> SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4InstanceCatalog( new altova::db::Catalog(m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance, 60) );
#endif
	
	try
	{
		m_dolibarr22Instance.CreateInstance(__uuidof(ADODB::Connection));
		m_dolibarr22Instance->Open(dolibarr22SourceConnectionString.c_str(), _bstr_t(), _bstr_t(), 0);
	}
	catch (_com_error& error)
	{
		throw altova::DataSourceUnavailableException(string_type(_T("Open database failed: ")) + string_type(error.ErrorMessage())
			+  string_type(_T("\r\n")) + string_type(error.Description()));
	}
#if __cplusplus < 201103L
	std::auto_ptr<altova::db::Catalog> dolibarr22InstanceCatalog( new altova::db::Catalog(m_dolibarr22Instance, 60) );
#else
	std::unique_ptr<altova::db::Catalog> dolibarr22InstanceCatalog( new altova::db::Catalog(m_dolibarr22Instance, 60) );
#endif
	
	try
	{
		m_dolibarr23Instance.CreateInstance(__uuidof(ADODB::Connection));
		m_dolibarr23Instance->Open(dolibarr23SourceConnectionString.c_str(), _bstr_t(), _bstr_t(), 0);
	}
	catch (_com_error& error)
	{
		throw altova::DataSourceUnavailableException(string_type(_T("Open database failed: ")) + string_type(error.ErrorMessage())
			+  string_type(_T("\r\n")) + string_type(error.Description()));
	}
#if __cplusplus < 201103L
	std::auto_ptr<altova::db::Catalog> dolibarr23InstanceCatalog( new altova::db::Catalog(m_dolibarr23Instance, 60) );
#else
	std::unique_ptr<altova::db::Catalog> dolibarr23InstanceCatalog( new altova::db::Catalog(m_dolibarr23Instance, 60) );
#endif
	

	// Create the target
	
	ADODB::_ConnectionPtr dolibarr2TargetObject;
	try
	{
		dolibarr2TargetObject.CreateInstance(__uuidof(ADODB::Connection));
		dolibarr2TargetObject->Open(dolibarr2TargetConnectionString.c_str(), _bstr_t(), _bstr_t(), 0);
	}
	catch (_com_error& error)
	{
		throw altova::DataTargetUnavailableException(string_type(_T("Open database failed: ")) + string_type(error.ErrorMessage())
			+  string_type(_T("\r\n")) + string_type(error.Description()));
	}
#if __cplusplus < 201103L
	std::auto_ptr<altova::db::Catalog> dolibarr2TargetObjectCatalog( new altova::db::Catalog(dolibarr2TargetObject, 60, true) );
#else
	std::unique_ptr<altova::db::Catalog> dolibarr2TargetObjectCatalog( new altova::db::Catalog(dolibarr2TargetObject, 60, true) );
#endif

	// Execute mapping

	main* mapping = new main(SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4InstanceCatalog.get(), 
dolibarr22InstanceCatalog.get(), 
dolibarr23InstanceCatalog.get());

	WriteDB(mapping, dolibarr2TargetObjectCatalog.get());
	
	// Close the target
		dolibarr2TargetObjectCatalog->Close();

	// Close sources
	m_SEEmed_0895452f_b7c1_4c00_a316_c6a6d0ea4bf4Instance->Close();
	m_dolibarr22Instance->Close();
	m_dolibarr23Instance->Close();

}
