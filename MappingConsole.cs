//
// MappingConsole.cs
//
// This file was generated by MapForce 2023r2.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//

using System;
using System.Collections;
using System.Data;
using System.Data.Common;
using Altova.Types;
//using Altova.Functions;

namespace Mapping
{
	public class MappingConsole 
	{

		public static void Main(string[] args) 
		{
			Console.Error.WriteLine("Mapping Application");
			
			try 
			{
				TraceTargetConsole ttc = new TraceTargetConsole();
				MappingMapToproduct MappingMapToproductObject = new MappingMapToproduct();
				MappingMapToproductObject.RegisterTraceTarget(ttc);
	


				// run mapping
				//
				// you have different options to provide mapping input and output:
				//
				// files using file names (available for XML, JSON, text, and Excel):
				//   Altova.IO.FileInput(string filename)
				//   Altova.IO.FileOutput(string filename)
				//
				// streams (available for XML, JSON, text, and Excel):
				//   Altova.IO.StreamInput(System.IO.Stream stream)
				//   Altova.IO.StreamOutput(System.IO.Stream stream)
				//
				// strings (available for XML, JSON and text):
				//   Altova.IO.StringInput(string content)
				//   Altova.IO.StringOutput(StringBuilder content)
				//
				// System.IO reader/writer (available for XML, JSON and text):
				//   Altova.IO.ReaderInput(System.IO.TextReader reader)
				//   Altova.IO.WriterOutput(System.IO.TextWriter writer)
				//
				// DOM documents (for XML only):
				//   Altova.IO.DocumentInput(System.Xml.XmlDocument document)
				//   Altova.IO.DocumentOutput(System.Xml.XmlDocument document)
				// 
				// By default, Run will close all inputs and outputs. If you do not want this,
				// set the following property:
				// MappingMapToproductObject.CloseObjectsAfterRun = false;
				
				{
				Altova.IO.Output productTarget = new Altova.IO.FileOutput("product");

				try
				{
					MappingMapToproductObject.Run(
					"DSN=dolibarr2;UID=dolibarr;Pwd=HU!DnNLvuv9a7n;DATABASE=dolibarr;DSN=dolibarr2",
					productTarget
					);		

				}
				finally
				{
					productTarget.Close();

				}
				}
				MappingMapTopropal MappingMapTopropalObject = new MappingMapTopropal();
				MappingMapTopropalObject.RegisterTraceTarget(ttc);
	


				// run mapping
				//
				// you have different options to provide mapping input and output:
				//
				// files using file names (available for XML, JSON, text, and Excel):
				//   Altova.IO.FileInput(string filename)
				//   Altova.IO.FileOutput(string filename)
				//
				// streams (available for XML, JSON, text, and Excel):
				//   Altova.IO.StreamInput(System.IO.Stream stream)
				//   Altova.IO.StreamOutput(System.IO.Stream stream)
				//
				// strings (available for XML, JSON and text):
				//   Altova.IO.StringInput(string content)
				//   Altova.IO.StringOutput(StringBuilder content)
				//
				// System.IO reader/writer (available for XML, JSON and text):
				//   Altova.IO.ReaderInput(System.IO.TextReader reader)
				//   Altova.IO.WriterOutput(System.IO.TextWriter writer)
				//
				// DOM documents (for XML only):
				//   Altova.IO.DocumentInput(System.Xml.XmlDocument document)
				//   Altova.IO.DocumentOutput(System.Xml.XmlDocument document)
				// 
				// By default, Run will close all inputs and outputs. If you do not want this,
				// set the following property:
				// MappingMapTopropalObject.CloseObjectsAfterRun = false;
				
				{
				Altova.IO.Output propal2Target = new Altova.IO.FileOutput("propal");

				try
				{
					MappingMapTopropalObject.Run(
					"DSN=dolibarr2;UID=dolibarr;Pwd=HU!DnNLvuv9a7n;DATABASE=dolibarr;DSN=dolibarr2",
					propal2Target
					);		

				}
				finally
				{
					propal2Target.Close();

				}
				}
				MappingMapTodolibarr2 MappingMapTodolibarr2Object = new MappingMapTodolibarr2();
				MappingMapTodolibarr2Object.RegisterTraceTarget(ttc);
	


				// run mapping
				//
				// you have different options to provide mapping input and output:
				//
				// files using file names (available for XML, JSON, text, and Excel):
				//   Altova.IO.FileInput(string filename)
				//   Altova.IO.FileOutput(string filename)
				//
				// streams (available for XML, JSON, text, and Excel):
				//   Altova.IO.StreamInput(System.IO.Stream stream)
				//   Altova.IO.StreamOutput(System.IO.Stream stream)
				//
				// strings (available for XML, JSON and text):
				//   Altova.IO.StringInput(string content)
				//   Altova.IO.StringOutput(StringBuilder content)
				//
				// System.IO reader/writer (available for XML, JSON and text):
				//   Altova.IO.ReaderInput(System.IO.TextReader reader)
				//   Altova.IO.WriterOutput(System.IO.TextWriter writer)
				//
				// DOM documents (for XML only):
				//   Altova.IO.DocumentInput(System.Xml.XmlDocument document)
				//   Altova.IO.DocumentOutput(System.Xml.XmlDocument document)
				// 
				// By default, Run will close all inputs and outputs. If you do not want this,
				// set the following property:
				// MappingMapTodolibarr2Object.CloseObjectsAfterRun = false;
				
				{
				Altova.IO.Input productSource = Altova.IO.StreamInput.createInput("product");
				Altova.IO.Input propal2Source = Altova.IO.StreamInput.createInput("propal");

				try
				{
					MappingMapTodolibarr2Object.Run(
					"Provider=SQLNCLI11.1; Data Source=CFPEI-ALEX\\SQLEXPRESS; User ID=\"\";Initial Catalog=SEEmed_0895452f-b7c1-4c00-a316-c6a6d0ea4bf4;Initial File Name=\"\";Integrated Security=SSPI",
					productSource,
					propal2Source,
					"DSN=dolibarr2;UID=dolibarr;Pwd=HU!DnNLvuv9a7n;DATABASE=dolibarr;DSN=dolibarr2"
					);		

				}
				finally
				{
					productSource.Close();
					propal2Source.Close();

				}
				}

				Console.Error.WriteLine("Finished");
			} 
			catch (Altova.UserException ue)
			{
				Console.Error.Write("USER EXCEPTION: ");
				Console.Error.WriteLine( ue.Message );
				System.Environment.Exit(1);
			}
			catch (Exception e) 
			{
				Console.Error.Write("ERROR: ");
				Console.Error.WriteLine( e.Message );
				for( var ex = e.InnerException; ex != null; ex = ex.InnerException )
				{
					Console.Error.Write("Inner Exception: ");
					Console.Error.WriteLine(ex.Message);
				}
				Console.Error.WriteLine("\nStack Trace: ");
				Console.Error.WriteLine( e.StackTrace );
				System.Environment.Exit(1);
			}
		}
	}


	class TraceTargetConsole : Altova.ITraceTarget
	{
		public void WriteTrace(string info)
		{
			Console.Error.WriteLine(info);
		}
	}
}
